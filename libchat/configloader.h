/* This file is generated by genxml. */
/* No manual modification is permitted. */

#pragma once







class CConfigLoader
{
public:
    struct STConfig
    {
        STConfig()
        {
            
        }
        
        struct STFriend
        {
            STFriend()
            {
                
                m_stracc.clear();
                
                m_iip = 0;
                
                m_ikey = 0;
                
                m_iname = 0;
                
                m_iport = 0;
                
            }
            
            std::string m_stracc;
            
            int32_t m_iip;
            
            int32_t m_ikey;
            
            int32_t m_iname;
            
            int32_t m_iport;
            

        };
        
        
        std::vector<STFriend> m_vecSTFriend;
        struct STSTUN
        {
            STSTUN()
            {
                
                m_strip.clear();
                
            }
            
            std::string m_strip;
            

        };
        
        
        std::vector<STSTUN> m_vecSTSTUN;
        struct STUser
        {
            STUser()
            {
                
                m_stracc.clear();
                
                m_strname.clear();
                
                m_iport = 0;
                
                m_ipwd = 0;
                
            }
            
            std::string m_stracc;
            
            std::string m_strname;
            
            int32_t m_iport;
            
            int32_t m_ipwd;
            

        };
        
        STUser m_STUser;

    };
    
    STConfig & GetConfig()
    {
        return m_STConfig;
    }

	bool SaveCfg(const std::string & file)
	{
		TiXmlDocument document;

		TiXmlElement root("Config");
		
		for (int i = 0; i < 1; i++)
		{
			STConfig::STFriend & tmpFriend = m_STConfig.m_vecSTFriend[i];

			TiXmlElement Friend("Friend");
			Friend.SetAttribute("port", tmpFriend.m_iport);

			root.InsertEndChild(Friend);
		}
		
		document.InsertEndChild(root);

		if (!document.SaveFile((const char*)file.c_str()))
		{
			LCERR("CConfigLoader::SaveFile(%s) failed", (const char*)file.c_str());
			return false;
		}

		return true;
	}

    bool LoadCfg(const std::string & file)
    {
        TiXmlDocument document;
        if (!document.LoadFile((const char*)file.c_str()))
        {
            LCERR("CConfigLoader::LoadCfg(%s) failed", (const char*)file.c_str());
            return false;
        }
        
        TiXmlElement* pConfig = document.RootElement();
        if (!pConfig)
        {
            LCERR("document.RootElement failed");
            return false;
        }
        
        // clear
        STConfig tmp;
        m_STConfig = tmp;
        
        
        
        
        for (TiXmlNode * pFriend = pConfig->FirstChild("Friend"); NULL != pFriend; pFriend = pFriend->NextSibling("Friend"))
        {
            
            STConfig::STFriend tmpFriend;
            
            tmpFriend.m_stracc = ((TiXmlElement *)pFriend)->Attribute("acc");
            LCLOG("        acc %s", tmpFriend.m_stracc.c_str());
            
            ((TiXmlElement *)pFriend)->Attribute("ip", &tmpFriend.m_iip);
            LCLOG("        ip %d", tmpFriend.m_iip);
            
            ((TiXmlElement *)pFriend)->Attribute("key", &tmpFriend.m_ikey);
            LCLOG("        key %d", tmpFriend.m_ikey);
            
            ((TiXmlElement *)pFriend)->Attribute("name", &tmpFriend.m_iname);
            LCLOG("        name %d", tmpFriend.m_iname);
            
            ((TiXmlElement *)pFriend)->Attribute("port", &tmpFriend.m_iport);
            LCLOG("        port %d", tmpFriend.m_iport);
            
            

            m_STConfig.m_vecSTFriend.push_back(tmpFriend);
        }
        for (TiXmlNode * pSTUN = pConfig->FirstChild("STUN"); NULL != pSTUN; pSTUN = pSTUN->NextSibling("STUN"))
        {
            
            STConfig::STSTUN tmpSTUN;
            
            tmpSTUN.m_strip = ((TiXmlElement *)pSTUN)->Attribute("ip");
            LCLOG("        ip %s", tmpSTUN.m_strip.c_str());
            
            

            m_STConfig.m_vecSTSTUN.push_back(tmpSTUN);
        }
        TiXmlNode * pUser = pConfig->FirstChild("User");
        if (pUser)
        {
            
            STConfig::STUser tmpUser;
            
            tmpUser.m_stracc = ((TiXmlElement *)pUser)->Attribute("acc");
            LCLOG("        acc %s", tmpUser.m_stracc.c_str());
            
            tmpUser.m_strname = ((TiXmlElement *)pUser)->Attribute("name");
            LCLOG("        name %s", tmpUser.m_strname.c_str());
            
            ((TiXmlElement *)pUser)->Attribute("port", &tmpUser.m_iport);
            LCLOG("        port %d", tmpUser.m_iport);
            
            ((TiXmlElement *)pUser)->Attribute("pwd", &tmpUser.m_ipwd);
            LCLOG("        pwd %d", tmpUser.m_ipwd);
            
            

            m_STConfig.m_STUser = tmpUser;
        }
        
        return true;
    }
    
private:
    STConfig m_STConfig;
};

extern CConfigLoader g_CConfigLoader;
